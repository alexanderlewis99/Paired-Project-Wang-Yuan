}
quantile(my.boot, c(0.025))
quantile(my.boot, c(0.975))
N <- 10^5
my.boot <- numeric(N)
for(i in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot[i] <- var(s) # compute variance, store in my.boot
}
quantile(my.boot, c(0.025))
quantile(my.boot, c(0.975))
length(x)
sd(x)
0.5^2
x_bar/(2*q_0.975)
x_bar/(2*q_0.025)
rm(my.boot)
N <- 10^5
my.boot <- numeric(N)
for(i in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot.MLE[i] <- sum(s^2)/n # compute MLE variance, store in my.boot
my.boot.MoM[i] <- mean(s)^2*pi/2 # compute MoM variance, store in my.boot
}
}
rm(my.boot)
N <- 10^5
my.boot.MLE <- numeric(N)
my.boot.MoM <- numeric(N)
for(i in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot.MLE[i] <- sum(s^2)/n # compute MLE variance, store in my.boot
my.boot.MoM[i] <- mean(s)^2*pi/2 # compute MoM variance, store in my.boot
}
mle_boot_lower[i] <- quantile(my.boot.MLE, c(0.025))
i
i <- 1
set.seed(0)
N <- 10^5
my.boot.MLE <- numeric(N)
my.boot.MoM <- numeric(N)
for(j in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot.MLE[j] <- sum(s^2)/n # compute MLE variance, store in my.boot
my.boot.MoM[j] <- mean(s)^2*pi/2 # compute MoM variance, store in my.boot
}
mle_boot_lower <- list()
mle_boot_lower[i] <- quantile(my.boot.MLE, c(0.025))
mle_boot_upper[i] <- quantile(my.boot.MLE, c(0.975))
mle_boot_lower <- list()
mle_boot_upper <- list()
mle_boot_lower[i] <- quantile(my.boot.MLE, c(0.025))
mle_boot_upper[i] <- quantile(my.boot.MLE, c(0.975))
# CI based on bootstrapping the MoM
mom_boot_lower <- list()
mom_boot_upper <- list()
mom_boot_lower[i] <- quantile(my.boot.MoM, c(0.025))
mom_boot_upper[i] <- quantile(my.boot.MoM, c(0.975))
mle_boot_lower
mle_boot_upper
mom_boot_lower
mom_boot_upper
sqrt(0.05)
0.05^2
10^5*10^5
set.seed(0)
K <- 10^2
est_mle <- list()
est_mom <- list()
mle_boot_lower <- list()
mle_boot_upper <- list()
mom_boot_lower <- list()
mom_boot_upper <- list()
for(i in 1:K){
x <- abs(rnorm(n,0,sigma))   # generating half normal random sample
est_mle[i] <- sum(x^2)/n # MLE formula
est_mom[i] <- mean(x)^2*pi/2 # MoM formula
q_0.975 <- qgamma(0.975,shape = n/2, 1/(2*sigma^2))
q_0.025 <- qgamma(0.025,shape = n/2, 1/(2*sigma^2))
# based on exact MLE CI (part d)
x_bar <- mean(x)
mle_lower[i] <- x_bar/(2*q_0.975)
# based on exact MLE CI (part d)
mle_upper[i] <- x_bar/(2*q_0.025)
# CI based on bootstrapping the MLE
set.seed(0)
N <- 10^4
my.boot.MLE <- numeric(N)
my.boot.MoM <- numeric(N)
for(j in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot.MLE[j] <- sum(s^2)/n # compute MLE variance, store in my.boot
my.boot.MoM[j] <- mean(s)^2*pi/2 # compute MoM variance, store in my.boot
}
mle_boot_lower[i] <- quantile(my.boot.MLE, c(0.025))
mle_boot_upper[i] <- quantile(my.boot.MLE, c(0.975))
# CI based on bootstrapping the MoM
mom_boot_lower[i] <- quantile(my.boot.MoM, c(0.025))
mom_boot_upper[i] <- quantile(my.boot.MoM, c(0.975))
}
set.seed(0)
K <- 10^2
est_mle <- list()
est_mom <- list()
mle_lower <- list()
mle_upper <- list()
mle_boot_lower <- list()
mle_boot_upper <- list()
mom_boot_lower <- list()
mom_boot_upper <- list()
for(i in 1:K){
x <- abs(rnorm(n,0,sigma))   # generating half normal random sample
est_mle[i] <- sum(x^2)/n # MLE formula
est_mom[i] <- mean(x)^2*pi/2 # MoM formula
q_0.975 <- qgamma(0.975,shape = n/2, 1/(2*sigma^2))
q_0.025 <- qgamma(0.025,shape = n/2, 1/(2*sigma^2))
# based on exact MLE CI (part d)
x_bar <- mean(x)
mle_lower[i] <- x_bar/(2*q_0.975)
# based on exact MLE CI (part d)
mle_upper[i] <- x_bar/(2*q_0.025)
# CI based on bootstrapping the MLE
set.seed(0)
N <- 10^4
my.boot.MLE <- numeric(N)
my.boot.MoM <- numeric(N)
for(j in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot.MLE[j] <- sum(s^2)/n # compute MLE variance, store in my.boot
my.boot.MoM[j] <- mean(s)^2*pi/2 # compute MoM variance, store in my.boot
}
mle_boot_lower[i] <- quantile(my.boot.MLE, c(0.025))
mle_boot_upper[i] <- quantile(my.boot.MLE, c(0.975))
# CI based on bootstrapping the MoM
mom_boot_lower[i] <- quantile(my.boot.MoM, c(0.025))
mom_boot_upper[i] <- quantile(my.boot.MoM, c(0.975))
}
mean(mom_boot_upper)
mle_boot_upper
asdf <- c()
asdf[1] <- 2
asdf[3] <- 2
asdf
set.seed(0)
K <- 10^4
est_mle <- c()
est_mom <- c()
mle_lower <- c()
mle_upper <- c()
mle_boot_lower <- c()
mle_boot_upper <- c()
mom_boot_lower <- c()
mom_boot_upper <- c()
for(i in 1:K){
x <- abs(rnorm(n,0,sigma))   # generating half normal random sample
est_mle[i] <- sum(x^2)/n # MLE formula
est_mom[i] <- mean(x)^2*pi/2 # MoM formula
q_0.975 <- qgamma(0.975,shape = n/2, 1/(2*sigma^2))
q_0.025 <- qgamma(0.025,shape = n/2, 1/(2*sigma^2))
# based on exact MLE CI (part d)
x_bar <- mean(x)
mle_lower[i] <- x_bar/(2*q_0.975)
# based on exact MLE CI (part d)
mle_upper[i] <- x_bar/(2*q_0.025)
# CI based on bootstrapping the MLE
set.seed(0)
N <- 10^4
my.boot.MLE <- numeric(N)
my.boot.MoM <- numeric(N)
for(j in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot.MLE[j] <- sum(s^2)/n # compute MLE variance, store in my.boot
my.boot.MoM[j] <- mean(s)^2*pi/2 # compute MoM variance, store in my.boot
}
mle_boot_lower[i] <- quantile(my.boot.MLE, c(0.025))
mle_boot_upper[i] <- quantile(my.boot.MLE, c(0.975))
# CI based on bootstrapping the MoM
mom_boot_lower[i] <- quantile(my.boot.MoM, c(0.025))
mom_boot_upper[i] <- quantile(my.boot.MoM, c(0.975))
}
set.seed(0)
K <- 10^4
est_mle <- c()
est_mom <- c()
mle_lower <- c()
mle_upper <- c()
mle_boot_lower <- c()
mle_boot_upper <- c()
mom_boot_lower <- c()
mom_boot_upper <- c()
for(i in 1:K){
x <- abs(rnorm(n,0,sigma))   # generating half normal random sample
est_mle[i] <- sum(x^2)/n # MLE formula
est_mom[i] <- mean(x)^2*pi/2 # MoM formula
q_0.975 <- qgamma(0.975,shape = n/2, 1/(2*sigma^2))
q_0.025 <- qgamma(0.025,shape = n/2, 1/(2*sigma^2))
# based on exact MLE CI (part d)
x_bar <- mean(x)
mle_lower[i] <- x_bar/(2*q_0.975)
# based on exact MLE CI (part d)
mle_upper[i] <- x_bar/(2*q_0.025)
# CI based on bootstrapping the MLE
set.seed(0)
N <- 10^4
my.boot.MLE <- numeric(N)
my.boot.MoM <- numeric(N)
for(j in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot.MLE[j] <- sum(s^2)/n # compute MLE variance, store in my.boot
my.boot.MoM[j] <- mean(s)^2*pi/2 # compute MoM variance, store in my.boot
}
mle_boot_lower[i] <- quantile(my.boot.MLE, c(0.025))
mle_boot_upper[i] <- quantile(my.boot.MLE, c(0.975))
# CI based on bootstrapping the MoM
mom_boot_lower[i] <- quantile(my.boot.MoM, c(0.025))
mom_boot_upper[i] <- quantile(my.boot.MoM, c(0.975))
print(i)
}
set.seed(0)
K <- 10^2
est_mle <- c()
est_mom <- c()
mle_lower <- c()
mle_upper <- c()
mle_boot_lower <- c()
mle_boot_upper <- c()
mom_boot_lower <- c()
mom_boot_upper <- c()
for(i in 1:K){
x <- abs(rnorm(n,0,sigma))   # generating half normal random sample
est_mle[i] <- sum(x^2)/n # MLE formula
est_mom[i] <- mean(x)^2*pi/2 # MoM formula
q_0.975 <- qgamma(0.975,shape = n/2, 1/(2*sigma^2))
q_0.025 <- qgamma(0.025,shape = n/2, 1/(2*sigma^2))
# based on exact MLE CI (part d)
x_bar <- mean(x)
mle_lower[i] <- x_bar/(2*q_0.975)
# based on exact MLE CI (part d)
mle_upper[i] <- x_bar/(2*q_0.025)
# CI based on bootstrapping the MLE
set.seed(0)
N <- 10^4
my.boot.MLE <- numeric(N)
my.boot.MoM <- numeric(N)
for(j in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot.MLE[j] <- sum(s^2)/n # compute MLE variance, store in my.boot
my.boot.MoM[j] <- mean(s)^2*pi/2 # compute MoM variance, store in my.boot
}
mle_boot_lower[i] <- quantile(my.boot.MLE, c(0.025))
mle_boot_upper[i] <- quantile(my.boot.MLE, c(0.975))
# CI based on bootstrapping the MoM
mom_boot_lower[i] <- quantile(my.boot.MoM, c(0.025))
mom_boot_upper[i] <- quantile(my.boot.MoM, c(0.975))
print(i)
}
mean(est_mle)
mean(est_mom)
mean(mle_lower)
mean(mle_upper)
mean(mle_boot_lower)
mean(mle_boot_upper)
mean(mom_boot_lower)
mean(mom_boot_upper)
sqrt(0.05)
0.05^2
mean(est_mle)
set.seed(0)
K <- 10^2
est_mle <- c()
est_mom <- c()
mle_lower <- c()
mle_upper <- c()
mle_boot_lower <- c()
mle_boot_upper <- c()
mom_boot_lower <- c()
mom_boot_upper <- c()
for(i in 1:K){
x <- abs(rnorm(n,0,sigma))   # generating half normal random sample
est_mle[i] <- sum(x^2)/n # MLE formula
est_mom[i] <- mean(x)^2*pi/2 # MoM formula
q_0.975 <- qgamma(0.975,shape = n/2, 1/(2*sigma^2))
q_0.025 <- qgamma(0.025,shape = n/2, 1/(2*sigma^2))
# based on exact MLE CI (part d)
x_bar <- mean(x)
mle_lower[i] <- x_bar/(2*q_0.975)
# based on exact MLE CI (part d)
mle_upper[i] <- x_bar/(2*q_0.025)
# CI based on bootstrapping the MLE
set.seed(0)
N <- 10^2
my.boot.MLE <- numeric(N)
my.boot.MoM <- numeric(N)
for(j in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot.MLE[j] <- sum(s^2)/n # compute MLE variance, store in my.boot
my.boot.MoM[j] <- mean(s)^2*pi/2 # compute MoM variance, store in my.boot
}
mle_boot_lower[i] <- quantile(my.boot.MLE, c(0.025))
mle_boot_upper[i] <- quantile(my.boot.MLE, c(0.975))
# CI based on bootstrapping the MoM
mom_boot_lower[i] <- quantile(my.boot.MoM, c(0.025))
mom_boot_upper[i] <- quantile(my.boot.MoM, c(0.975))
print(i)
}
n <- 100 # sample size
sigma <- sqrt(0.05) # value of sigma
set.seed(0)
K <- 10^2
est_mle <- c()
est_mom <- c()
mle_lower <- c()
mle_upper <- c()
mle_boot_lower <- c()
mle_boot_upper <- c()
mom_boot_lower <- c()
mom_boot_upper <- c()
for(i in 1:K){
x <- abs(rnorm(n,0,sigma))   # generating half normal random sample
est_mle[i] <- sum(x^2)/n # MLE formula
est_mom[i] <- mean(x)^2*pi/2 # MoM formula
q_0.975 <- qgamma(0.975,shape = n/2, 1/(2*sigma^2))
q_0.025 <- qgamma(0.025,shape = n/2, 1/(2*sigma^2))
# based on exact MLE CI (part d)
x_bar <- mean(x)
mle_lower[i] <- x_bar/(2*q_0.975)
# based on exact MLE CI (part d)
mle_upper[i] <- x_bar/(2*q_0.025)
# CI based on bootstrapping the MLE
set.seed(0)
N <- 10^2
my.boot.MLE <- numeric(N)
my.boot.MoM <- numeric(N)
for(j in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot.MLE[j] <- sum(s^2)/n # compute MLE variance, store in my.boot
my.boot.MoM[j] <- mean(s)^2*pi/2 # compute MoM variance, store in my.boot
}
mle_boot_lower[i] <- quantile(my.boot.MLE, c(0.025))
mle_boot_upper[i] <- quantile(my.boot.MLE, c(0.975))
# CI based on bootstrapping the MoM
mom_boot_lower[i] <- quantile(my.boot.MoM, c(0.025))
mom_boot_upper[i] <- quantile(my.boot.MoM, c(0.975))
print(i)
}
mean(est_mle)
mean(est_mom)
mean(mle_lower)
mean(mle_upper)
mean(mle_boot_lower)
mean(mle_boot_upper)
mean(mom_boot_lower)
mean(mom_boot_upper)
n <- 100 # sample size
sigma <- sqrt(0.05) # value of sigma
set.seed(0)
K <- 10^2
est_mle <- c()
est_mom <- c()
mle_lower <- c()
mle_upper <- c()
mle_boot_lower <- c()
mle_boot_upper <- c()
mom_boot_lower <- c()
mom_boot_upper <- c()
for(i in 1:K){
x <- abs(rnorm(n,0,sigma))   # generating half normal random sample
est_mle[i] <- sum(x^2)/n # MLE formula
est_mom[i] <- mean(x)^2*pi/2 # MoM formula
q_0.975 <- qgamma(0.975,shape = n/2, 1/(2*sigma^2))
q_0.025 <- qgamma(0.025,shape = n/2, 1/(2*sigma^2))
# based on exact MLE CI (part d)
x_bar <- mean(x)
mle_lower[i] <- x_bar/(2*q_0.975)
# based on exact MLE CI (part d)
mle_upper[i] <- x_bar/(2*q_0.025)
# CI based on bootstrapping the MLE
set.seed(0)
N <- 10^2
my.boot.MLE <- numeric(N)
my.boot.MoM <- numeric(N)
for(j in 1:N)
{
s <- sample(x, 100, replace = TRUE) # draw resamples
my.boot.MLE[j] <- sum(s^2)/n # compute MLE variance, store in my.boot
my.boot.MoM[j] <- mean(s)^2*pi/2 # compute MoM variance, store in my.boot
}
mle_boot_lower[i] <- quantile(my.boot.MLE, c(0.025))
mle_boot_upper[i] <- quantile(my.boot.MLE, c(0.975))
# CI based on bootstrapping the MoM
mom_boot_lower[i] <- quantile(my.boot.MoM, c(0.025))
mom_boot_upper[i] <- quantile(my.boot.MoM, c(0.975))
}
mean(est_mle)
mean(est_mom)
mean(mle_lower)
mean(mle_upper)
mean(mle_boot_lower)
mean(mle_boot_upper)
mean(mom_boot_lower)
mean(mom_boot_upper)
est_mle.mean <- mean(est_mle)
est_mom.mean <- mean(est_mom)
mle_lower.mean <- mean(mle_lower)
mle_upper.mean <- mean(mle_upper)
mle_boot_lower.mean <- mean(mle_boot_lower)
mle_boot_upper.mean <- mean(mle_boot_upper)
mom_boot_lower.mean <- mean(mom_boot_lower)
mom_boot_upper.mean <- mean(mom_boot_upper)
est_mle.mean
sigma^2
mse <- mean((est - sigma^2)^2) # mean of squared deviations (est - truth)^2
mse <- mean((est - sigma^2)^2) # mean of squared deviations (est - truth)^2
mse <- mean((est - sigma^2)^2) # mean of squared deviations (est - truth)^2
est_mle.mean <- mean(est_mle)
est_mom.mean <- mean(est_mom)
mle_lower.mean <- mean(mle_lower)
mle_upper.mean <- mean(mle_upper)
mle_boot_lower.mean <- mean(mle_boot_lower)
mle_boot_upper.mean <- mean(mle_boot_upper)
mom_boot_lower.mean <- mean(mom_boot_lower)
mom_boot_upper.mean <- mean(mom_boot_upper)
est_mle.error <- getEstError(est_mle.mean)
getEstError <- function(est, sigma){
bias <- mean(est) - sigma^2
perc_bias <- 100*bias/sigma^2  # bias as a percentage of sigma^2
mse <- mean((est - sigma^2)^2) # mean of squared deviations (est - truth)^2
res <- list(bias, perc_bias, mse)
return(res)
}
est_mle.error <- getEstError(est_mle.mean)
est_mle.error <- getEstError(est_mle.mean, sigma)
est_mom.error <- getEstError(est_mom.mean, sigma)
mle_lower.error <- getEstError(mle_lower.mean, sigma)
mle_upper.error <- getEstError(mle_upper.mean, sigma)
mle_boot_lower.error <- getEstError(mle_boot_lower.mean, sigma)
mle_boot_upper.error <- getEstError(mle_boot_upper.mean, sigma)
mom_boot_lower.error <- getEstError(mom_boot_lower.mean, sigma)
mom_boot_upper.error <- getEstError(mom_boot_upper.mean, sigma)
est_mle.error
getEstError <- function(est, sigma){
bias <- mean(est) - sigma^2
perc_bias <- 100*bias/sigma^2  # bias as a percentage of sigma^2
mse <- mean((est - sigma^2)^2) # mean of squared deviations (est - truth)^2
res <- list(bias, perc_bias, mse)
names(res) <- c("bias", "perc_bias", "mse")
return(res)
}
est_mle.error <- getEstError(est_mle.mean, sigma)
est_mom.error <- getEstError(est_mom.mean, sigma)
mle_lower.error <- getEstError(mle_lower.mean, sigma)
mle_upper.error <- getEstError(mle_upper.mean, sigma)
mle_boot_lower.error <- getEstError(mle_boot_lower.mean, sigma)
mle_boot_upper.error <- getEstError(mle_boot_upper.mean, sigma)
mom_boot_lower.error <- getEstError(mom_boot_lower.mean, sigma)
mom_boot_upper.error <- getEstError(mom_boot_upper.mean, sigma)
est_mle.error
est_mle.error <- getEstError(est_mle.mean, sigma)
est_mom.error <- getEstError(est_mom.mean, sigma)
est_mle.error
est_mom.error
mle_lower.mean <- mean(mle_lower)
mle_upper.mean <- mean(mle_upper)
mle_boot_lower.mean <- mean(mle_boot_lower)
mle_boot_upper.mean <- mean(mle_boot_upper)
mom_boot_lower.mean <- mean(mom_boot_lower)
mom_boot_upper.mean <- mean(mom_boot_upper)
getCoverage <- function(lower, upper, sigma){
cover <- mean((lower <= sigma^2) & (sigma^2 <= upper))
}
getMeanLength <- function(upper, lower){
mean.length <- mean(upper - lower)
}
mle.cover <- getCoverage(mle_lower.mean, mle_upper.mean, sigma)
mle_boot.cover <- getCoverage(mle_boot_lower.mean, mle_boot_upper.mean, sigma)
mom_boot.cover <- getCoverage(mom_boot_lower.mean, mom_boot_upper.mean, sigma)
mle.cover
mle_boot.cover
mom_boot.cover
mle_lower.mean
mle_upper.mean
mle.cover <- getCoverage(mle_lower.mean, mle_upper.mean, sigma)
mle.meanLength <- getMeanLength(mle_lower.mean, mle_upper.mean)
mle_boot.cover <- getCoverage(mle_boot_lower.mean, mle_boot_upper.mean, sigma)
mle_boot.meanLength <- getMeanLength(mle_boot_lower.mean, mle_boot_upper.mean)
mom_boot.cover <- getCoverage(mom_boot_lower.mean, mom_boot_upper.mean, sigma)
mom_boot.meanLength <- getMeanLength(mom_boot_lower.mean, mom_boot_upper.mean)
mom_boot.meanLength
mle_boot.meanLength
mle.meanLength
mle.cover
mle_boot.cover
mom_boot.cover
lower
mean((mle_lower.mean <= sigma^2) & (sigma^2 <= mle_upper.mean))
(mle_lower.mean <= sigma^2)
(sigma^2 <= mle_upper.mean))
(sigma^2 <= mle_upper.mean)
mle.cover
mle_boot.cover
mom_boot.cover
